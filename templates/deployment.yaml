apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pypicloud.fullname" . }}
  labels:
    app: {{ include "pypicloud.name" . }}
    chart: {{ include "pypicloud.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "pypicloud.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "pypicloud.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "pypicloud.serviceAccountName" . }}
{{- if .Values.envSecret }}
      initContainers:
        - name: init-config
          image: "ubuntu:20.04"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['bash', '-ec', "export DEBIAN_FRONTEND=noninteractive; apt-get update; apt-get -y install gettext whois; for p in `set | awk -F= '$1 ~ /USER_.*_PASSWORD/ { print }'`; do k=${p%=*}; v=${p#*=}; export $k=`mkpasswd -m sha512crypt -s -R 20500 $v`; done; envsubst < /etc/pypicloud-config/config.ini > /etc/pypicloud/config.ini"]
          volumeMounts:
          - name: config-template
            mountPath: /etc/pypicloud-config
          - name: config-volume
            mountPath: /etc/pypicloud
# Get environment variables from secret, if defined in envSecret
          envFrom:
            - secretRef:
                name: {{ .Values.envSecret }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
          - name: config-volume
            mountPath: /etc/pypicloud
{{- if .Values.gcsSecret }}
          - name: secret-volume
            mountPath: /etc/pypicloud-secret
{{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
{{ toYaml .Values.env | indent 12 }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: config-volume
          emptyDir: {}
        - name: config-template
          secret:
            secretName: pypicloud-config
{{- if .Values.gcsSecret }}
        - name: secret-volume
          secret:
            secretName: {{ .Values.gcsSecret }}
{{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
